import CONFIG from"../config";const ENDPOINTS={STORIES:`${CONFIG.BASE_URL}/stories`,STORY_DETAIL:e=>`${CONFIG.BASE_URL}/stories/${e}`,LOGIN:`${CONFIG.BASE_URL}/login`,REGISTER:`${CONFIG.BASE_URL}/register`};function getAccessToken(){return localStorage.getItem("accessToken")}async function safeJsonParse(e){try{return await e.json()}catch(e){throw new Error("Gagal mengurai respons JSON dari server.")}}function handleErrorResponse(e,a="Permintaan"){switch(e.status){case 400:throw new Error(`${a} gagal: Bad Request (${e.status}).`);case 401:throw new Error(`${a} gagal: Token tidak valid atau sudah kedaluwarsa.`);case 413:throw new Error(`${a} gagal: Ukuran file terlalu besar.`);default:throw new Error(`${a} gagal: ${e.statusText} (${e.status}).`)}}const API={async getAllStories(){const e=getAccessToken();if(!e)throw new Error("Token tidak tersedia. Silakan login ulang.");const a=await fetch(ENDPOINTS.STORIES,{headers:{Authorization:`Bearer ${e}`}});return a.ok||handleErrorResponse(a,"Mengambil data cerita"),(await safeJsonParse(a)).listStory},async getStoryDetail(e){const a=getAccessToken();if(!a)throw new Error("Token tidak tersedia. Silakan login ulang.");const r=await fetch(ENDPOINTS.STORY_DETAIL(e),{headers:{Authorization:`Bearer ${a}`}});return r.ok||handleErrorResponse(r,"Mengambil detail cerita"),(await safeJsonParse(r)).story},async addStory({description:e,photoFile:a,lat:r,lon:t}){const o=getAccessToken();if(!o)throw new Error("Token tidak tersedia. Silakan login ulang.");const s=new FormData;s.append("description",e),s.append("photo",a),void 0!==r&&void 0!==t&&(s.append("lat",r),s.append("lon",t));const n=await fetch(ENDPOINTS.STORIES,{method:"POST",headers:{Authorization:`Bearer ${o}`},body:s});return n.ok||handleErrorResponse(n,"Mengirim cerita baru"),await safeJsonParse(n)},async login({email:e,password:a}){const r=await fetch(ENDPOINTS.LOGIN,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({email:e,password:a})});r.ok||handleErrorResponse(r,"Login");const t=await safeJsonParse(r);if(t.error)throw new Error(t.message);return t.loginResult},async register({name:e,email:a,password:r}){const t=await fetch(ENDPOINTS.REGISTER,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({name:e,email:a,password:r})});t.ok||handleErrorResponse(t,"Registrasi");const o=await safeJsonParse(t);if(o.error)throw new Error(o.message);return o}};export default API;