const DB_NAME="storyapp2-db",DB_VERSION=2,STORE_NAME="stories",PENDING_STORE="pendingStories";function openDB(){return new Promise(((e,t)=>{const o=indexedDB.open(DB_NAME,2);o.onupgradeneeded=e=>{const t=e.target.result;t.objectStoreNames.contains("stories")||t.createObjectStore("stories",{keyPath:"id"}),t.objectStoreNames.contains(PENDING_STORE)||t.createObjectStore(PENDING_STORE,{keyPath:"localId",autoIncrement:!0})},o.onsuccess=()=>e(o.result),o.onerror=()=>t(o.error)}))}export async function addPendingStory(e){const t=await openDB(),o=t.transaction(PENDING_STORE,"readwrite"),r=o.objectStore(PENDING_STORE);await r.add(e),await o.complete,t.close()}export async function getAllPendingStories(){const e=await openDB(),t=e.transaction(PENDING_STORE,"readonly"),o=t.objectStore(PENDING_STORE);return new Promise(((r,n)=>{const s=o.getAll();s.onsuccess=()=>r(s.result),s.onerror=()=>n(s.error),t.oncomplete=()=>e.close()}))}export async function deletePendingStory(e){const t=await openDB(),o=t.transaction(PENDING_STORE,"readwrite"),r=o.objectStore(PENDING_STORE);await r.delete(e),await o.complete,t.close()}export async function saveStories(e){const t=await openDB(),o=t.transaction("stories","readwrite"),r=o.objectStore("stories");for(const t of e)r.put(t);await o.complete,t.close()}export async function getAllStories(){const e=await openDB(),t=e.transaction("stories","readonly"),o=t.objectStore("stories");return new Promise(((r,n)=>{const s=o.getAll();s.onsuccess=()=>r(s.result),s.onerror=()=>n(s.error),t.oncomplete=()=>e.close()}))}export async function deleteStory(e){const t=await openDB(),o=t.transaction("stories","readwrite");o.objectStore("stories").delete(e),await o.complete,t.close()}